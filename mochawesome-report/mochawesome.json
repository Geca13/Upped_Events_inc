{
  "stats": {
    "suites": 1,
    "tests": 51,
    "passes": 36,
    "pending": 0,
    "failures": 15,
    "start": "2022-12-04T00:04:39.507Z",
    "end": "2022-12-04T00:57:15.634Z",
    "duration": 3156127,
    "testsRegistered": 51,
    "passPercent": 70.58823529411765,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b6c55a97-e946-4ed2-a0bc-3826b77a3e6b",
      "title": "",
      "fullFile": "D:\\Upped_Events_Inc\\test\\PortalBox-OfficeTests.js",
      "file": "\\test\\PortalBox-OfficeTests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
          "title": "Should do box office related tests",
          "fullFile": "D:\\Upped_Events_Inc\\test\\PortalBox-OfficeTests.js",
          "file": "\\test\\PortalBox-OfficeTests.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Should do box office related tests\"",
              "fullTitle": "Should do box office related tests \"before each\" hook in \"Should do box office related tests\"",
              "timedOut": false,
              "duration": 23565,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//driver = await new Builder().forBrowser('chrome').setChromeOptions(new chrome.Options().addArguments('--headless')).build();\n//await driver.manage().window().setRect({width: 1300, height: 1080});\ndriver = await new Builder().forBrowser('chrome').build();\nawait driver.manage().window().setRect({width: 1300, height: 1080});\n\nportalLogin = new PortalLoginPage(driver);\ndashboard = new DashboardPage(driver);\nmyEvents = new MyEventsPage(driver);\neventDetails = new GeneralDetailsTab(driver);\nticketsNav = new TicketsNav(driver);\nbosTickets = new BOSelectTickets(driver);\nbosExtras = new BOAddExtras(driver);\nbosDetails = new BOAddDetails(driver);\nbosReview = new BOReviewAndPay(driver);\nsideMenu = new SideMenu(driver);\nsectionsNavs = new SectionsNavs(driver);\nif(environment === \"stage\"){\n    await portalLogin.loadAndLoginToStagePortal()\n} else {\n    await portalLogin.loadAndLoginToDevPortal();\n}\nawait dashboard.isAtDashboardPage();",
              "err": {},
              "uuid": "2c0bb1ac-defa-4159-b5cc-9dffa9b58d28",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Should do box office related tests\"",
              "fullTitle": "Should do box office related tests \"after each\" hook in \"Should do box office related tests\"",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver){\n    try {\n        await driver.quit();\n    } catch(e) {\n        console.log('Failed to close webdriver due: ' + e.message);\n    }\n}else{\n    console.log(\"No active driver\")\n}",
              "err": {},
              "uuid": "43721515-5cb0-432a-8da0-49e145eb4d25",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create new event",
              "fullTitle": "Should do box office related tests should create new event",
              "timedOut": false,
              "duration": 28195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let split ;\ncreateEvent = new CreateEventModal(driver);\nawait dashboard.clickCreateEventButton();\nawait createEvent.createEventModalIsDisplayed();\nawait createEvent.fillFormWithValidDataAndSave(eventName,shortName);\nlet urlToSplit = await driver.getCurrentUrl();\nsplit = await urlToSplit.split('/')\neventId = split[split.length - 2]",
              "err": {},
              "uuid": "d0217081-4376-466d-bd90-383e214dce4e",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create first ticket and assert data in box-office table",
              "fullTitle": "Should do box office related tests should create first ticket and assert data in box-office table",
              "timedOut": false,
              "duration": 34789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createTicket = new CreateTicketModal(driver);\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await driver.sleep(1000);\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickTicketingTab();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickAddTicketButton();\n            await createTicket.createNewTicket(ticketOneName,ticketOnePrice, ticketOneQuantity);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickActivateTicketToggle(ticketOneName);\n            await sectionsNavs.clickNavByText(\"Box Office\");\n            await bosTickets.assertTicketDataByTicketName(ticketOneName,ticketOnePrice.toFixed(2), ticketOneQuantity);",
              "err": {},
              "uuid": "2c66d70b-01e4-4d30-96d1-0b29c36a42ac",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert box-office navigation steps names",
              "fullTitle": "Should do box office related tests should assert box-office navigation steps names",
              "timedOut": false,
              "duration": 19004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.assertNavigationButtonsCountAndText();",
              "err": {},
              "uuid": "d42f4b08-b063-409c-bac3-34078776ac80",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get red error message when tickets are not selected and user clicks on the save button",
              "fullTitle": "Should do box office related tests should get red error message when tickets are not selected and user clicks on the save button",
              "timedOut": false,
              "duration": 29240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.clickSaveButtonWhenTicketsNotSelectedAssertErrorMessage();",
              "err": {},
              "uuid": "7b2c7bd9-16a9-4b75-8779-2ef88cc0311a",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get red error message when tickets are not selected and user clicks on the Add Extras Step Nav",
              "fullTitle": "Should do box office related tests should get red error message when tickets are not selected and user clicks on the Add Extras Step Nav",
              "timedOut": false,
              "duration": 30821,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.clickAddExtrasNavButtonWhenTicketsNotSelectedAssertErrorMessage();",
              "err": {},
              "uuid": "12c60c74-e8af-4b09-aec3-9d6ea0e1a6fb",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should land on Extras page when user selects tickets and click on Save button",
              "fullTitle": "Should do box office related tests should land on Extras page when user selects tickets and click on Save button",
              "timedOut": false,
              "duration": 27746,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.isOnExtrasScreen();",
              "err": {},
              "uuid": "bd2d795f-8f22-455c-a53c-4dfb58f6760a",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should land on Extras page when user selects tickets and click on Extras Step Nav",
              "fullTitle": "Should do box office related tests should land on Extras page when user selects tickets and click on Extras Step Nav",
              "timedOut": false,
              "duration": 37108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(1);\n            await bosExtras.isOnExtrasScreen();",
              "err": {},
              "uuid": "efc4f48f-42c1-4715-b7fa-6d0ad200ac83",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should land on Details page when user selects tickets and click on Details Step Nav",
              "fullTitle": "Should do box office related tests should land on Details page when user selects tickets and click on Details Step Nav",
              "timedOut": false,
              "duration": 25042,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(2);\n            await bosDetails.isOnDetailsPage();",
              "err": {},
              "uuid": "c6b6c2bc-1186-4b8f-a35b-d018e914954f",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should land on Payment page when user selects tickets and click on Review Step Nav",
              "fullTitle": "Should do box office related tests should land on Payment page when user selects tickets and click on Review Step Nav",
              "timedOut": false,
              "duration": 26457,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(3);\n            await bosReview.isOnReviewPage();",
              "err": {},
              "uuid": "770861d9-0863-49af-b171-9a133fc7187c",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set and assert new price and its font color",
              "fullTitle": "Should do box office related tests should set and assert new price and its font color",
              "timedOut": false,
              "duration": 26158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.isOnBoxOfficePage();\n            await bosTickets.addNewQuantityAndSetNewPrice();",
              "err": {},
              "uuid": "920b82d1-ee66-4470-9ad8-dee75b7fa625",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate to Extras page and assert elements",
              "fullTitle": "Should do box office related tests should navigate to Extras page and assert elements",
              "timedOut": false,
              "duration": 36280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.assertElementsOnExtrasPage();",
              "err": {},
              "uuid": "07e690cf-5575-416e-a267-d911a36adb58",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get blue donation not enabled when clicked donation option and donation not enabled in portal",
              "fullTitle": "Should do box office related tests should get blue donation not enabled when clicked donation option and donation not enabled in portal",
              "timedOut": false,
              "duration": 28344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.clickDonationOptionAndReceiveDonationNotEnabledMessage();",
              "err": {},
              "uuid": "b1fa0cde-dff0-41cc-84f6-f329dec94531",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should enable donation in portal and assert donation component is displayed and assert elements",
              "fullTitle": "Should do box office related tests should enable donation in portal and assert donation component is displayed and assert elements",
              "timedOut": false,
              "duration": 55477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sectionsNavs = new SectionsNavs(driver)\n            donation = new DonationPage(driver);\n            createDonation = new CreateDonationModal(driver);\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.ticketingTabIsDisplayed();\n            await sectionsNavs.clickNavByText(\"Settings\");\n            await sectionsNavs.clickSubNavByText(\"Donations\");\n            await donation.donationPageIsVisible();\n            await donation.activateDonationsOnEvent();\n            await donation.clickAddDonationButton();\n            await createDonation.createDonation();\n            await donation.donationPageIsVisible();\n            await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.clickOnDonationOptionAndAssertElements(eventName)",
              "err": {},
              "uuid": "7d68d8af-0adf-4035-a5e7-545866aa4b93",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert when donation value button is clicked the value is displayed in input",
              "fullTitle": "Should do box office related tests should assert when donation value button is clicked the value is displayed in input",
              "timedOut": false,
              "duration": 32313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.clickDonationOptionAndAssertWhenDonationButtonClickedValueAddedToInput();",
              "err": {},
              "uuid": "a45d39d7-3b2a-4026-9958-5a8df079f6b8",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should enter custom amount, click add to order button and assert green added donation message",
              "fullTitle": "Should do box office related tests should enter custom amount, click add to order button and assert green added donation message",
              "timedOut": false,
              "duration": 34787,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.clickDonationOptionAddCustomDonationAndAssertAddedDonationMessage();",
              "err": {},
              "uuid": "31a49866-00ac-49b7-a9cc-7fc3a706481e",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add custom donation add to order, open the modal and check if value is still in input",
              "fullTitle": "Should do box office related tests should add custom donation add to order, open the modal and check if value is still in input",
              "timedOut": false,
              "duration": 34182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.checkDonationAmountIsSavedInDonationModal();",
              "err": {},
              "uuid": "1c75ff6b-7474-42dd-84ec-5d91854d5fec",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should click Select Tickets nav from Extras page to go back to Tickets page and assert previously selected ticket value is still selected",
              "fullTitle": "Should do box office related tests should click Select Tickets nav from Extras page to go back to Tickets page and assert previously selected ticket value is still selected",
              "timedOut": false,
              "duration": 21674,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.clickNavButtonByIndexWhenOnExtrasPage(0);\n            await bosTickets.assertSelectedQtyByIndex(0, 2);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'getAttribute')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'getAttribute')\n    at BOSelectTickets.getEnteredTextInTheInputByIndex (BasePage.js:284:22)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async BOSelectTickets.assertSelectedQtyByIndex (portal\\ticketing\\BoxOffice\\BOSelectTickets.js:230:28)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:292:13)",
                "diff": null
              },
              "uuid": "4f03da8b-abf9-49fa-9e92-0181be744e64",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should click Add Details nav from Extras page to go to Details tab",
              "fullTitle": "Should do box office related tests should click Add Details nav from Extras page to go to Details tab",
              "timedOut": false,
              "duration": 28183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.clickNavButtonByIndexWhenOnExtrasPage(2);\n            await bosDetails.isOnDetailsPage();",
              "err": {},
              "uuid": "84d772cd-6701-4d94-832f-efdb7c2c0a7c",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should click Review and Pay nav from Extras page to go to Review page",
              "fullTitle": "Should do box office related tests should click Review and Pay nav from Extras page to go to Review page",
              "timedOut": false,
              "duration": 23448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosExtras.clickNavButtonByIndexWhenOnExtrasPage(3);\n            await bosReview.isOnReviewPage();",
              "err": {},
              "uuid": "e8639c01-a7d9-4b09-8b91-a13d78b1550c",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert elements on Order Details page when only 1 ticket selected and no taxes , fees, donation, promotion and ticket questions",
              "fullTitle": "Should do box office related tests should assert elements on Order Details page when only 1 ticket selected and no taxes , fees, donation, promotion and ticket questions",
              "timedOut": false,
              "duration": 36057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 1);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(2);\n            await bosDetails.assertElementsOnOrderDetailsWithOnlyBasicTicket(ticketOneName);",
              "err": {},
              "uuid": "c8d2afcc-c9a0-4f13-8210-9e984f289f92",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert elements on Review and Pay page when only 1 ticket selected and no taxes , fees, donation or promotion",
              "fullTitle": "Should do box office related tests should assert elements on Review and Pay page when only 1 ticket selected and no taxes , fees, donation or promotion",
              "timedOut": false,
              "duration": 29055,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 1);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(3);\n            await bosReview.assertElementsOnReviewAndPayPageWhenOneTicketSelected(ticketOneName);",
              "err": {},
              "uuid": "2d4a55cc-6442-447c-b052-da081becd8b1",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add excluded tax and check if bayer total is updated in ticket summary",
              "fullTitle": "Should do box office related tests should add excluded tax and check if bayer total is updated in ticket summary",
              "timedOut": false,
              "duration": 40570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "taxesAndFees = new TaxesAndFeesPage(driver);\n            await taxesAndFees.openTaxesAndFeesDirectly(eventId, environment);\n            await taxesAndFees.addOneTaxForTickets();\n            await taxesAndFees.clickSaveTaxesAndFeesButton();\n            let savedTaxValue = await taxesAndFees.getFloatNumberForTaxOrFee(1,1);\n            await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(2);\n            await bosDetails.assertTaxValueAndTicketTotalMultipliedByTaxEqualsTotal(savedTaxValue);",
              "err": {},
              "uuid": "7d358246-82af-48cb-ac31-5a87e3259ec8",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove tax and add $ value fee and assert price in order total",
              "fullTitle": "Should do box office related tests should remove tax and add $ value fee and assert price in order total",
              "timedOut": false,
              "duration": 67985,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "taxesAndFees = new TaxesAndFeesPage(driver);\n            await taxesAndFees.openTaxesAndFeesDirectly(eventId, environment);\n            await taxesAndFees.clickRemoveTaxOrFeeButtonByIndex(0);\n            await taxesAndFees.clickSaveTaxesAndFeesButton();\n            await taxesAndFees.set$FeeForTickets(\"Check $ Fee\", \".02\");\n            await taxesAndFees.clickSaveTaxesAndFeesButton();\n            let saved$FeeValue = await taxesAndFees.get$FeeFromInputByIndex(1);\n            await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(2);\n            await bosDetails.assertFeeValueThenTicketTotalPlusFeeTimesTicketQtyEqualsTotal(saved$FeeValue);",
              "err": {},
              "uuid": "215c5ea8-bd90-43be-9255-07957c578110",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add excluded tax again and check correct calculation for total",
              "fullTitle": "Should do box office related tests should add excluded tax again and check correct calculation for total",
              "timedOut": false,
              "duration": 42739,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "taxesAndFees = new TaxesAndFeesPage(driver);\n            await taxesAndFees.openTaxesAndFeesDirectly(eventId, environment);\n            await taxesAndFees.addOneTaxForTickets();\n            await taxesAndFees.clickSaveTaxesAndFeesButton();\n            let savedTaxValue = await taxesAndFees.getFloatNumberForTaxOrFee(1,1);\n            let saved$FeeValue = await taxesAndFees.get$FeeFromInputByIndex(2);\n            let cleanedFee = saved$FeeValue.substring(1)\n            await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTicketByIndexSendQuantityAndSave(0, 2);\n            await bosTickets.clickNavButtonByIndexWhenTicketsSelected(2);\n            await bosDetails.assertFeeAndTaxValuesThenAssertTicketTotalPlusFeesAndTaxesEqualsTotal(savedTaxValue, cleanedFee);",
              "err": {},
              "uuid": "9efd57f6-5139-4a8f-b9d6-2903a1dd7b6e",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create ticket groups and three more tickets",
              "fullTitle": "Should do box office related tests should create ticket groups and three more tickets",
              "timedOut": false,
              "duration": 113406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createTicket = new CreateTicketModal(driver);\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickTicketingTab();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.createTicketsGroup(ticketGroupOne);\n            await ticketsNav.successTicketGroupBannerIsDisplayed();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.createTicketsGroup(ticketGroupTwo);\n            await ticketsNav.clickGroupTabByIndex(2);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickAddTicketButton();\n            await createTicket.ticketNameInputIsDisplayed();\n            await createTicket.createNewTicket(ticketTwoName,ticketTwoPrice,ticketTwoQuantity);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.createdTicketIsInTheTable(ticketTwoName);\n            await ticketsNav.clickActivateTicketToggle(ticketTwoName);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickAddTicketButton();\n            await createTicket.ticketNameInputIsDisplayed();\n            await createTicket.createNewTicket(ticketThreeName,ticketThreePrice,ticketThreeQuantity);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.createdTicketIsInTheTable(ticketThreeName);\n            await ticketsNav.clickActivateTicketToggle(ticketThreeName);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.createTicketsGroup(ticketGroupThree);\n            await ticketsNav.clickGroupTabByIndex(3);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickAddTicketButton();\n            await createTicket.ticketNameInputIsDisplayed();\n            await createTicket.createNewTicket(ticketFourName,ticketFourPrice,ticketFourQuantity);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.createdTicketIsInTheTable(ticketFourName);\n            await ticketsNav.clickActivateTicketToggle(ticketFourName);\n            await ticketsNav.clickGroupTabByIndex(0);",
              "err": {},
              "uuid": "a6465ca4-5de3-4922-9d80-6e79aec13f9a",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create promotion for 3 tickets with limit qty on two and create 100% promotion",
              "fullTitle": "Should do box office related tests should create promotion for 3 tickets with limit qty on two and create 100% promotion",
              "timedOut": false,
              "duration": 57335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createTicket = new CreateTicketModal(driver);\n            promotions = new PromotionsPage(driver);\n            newPromotion = new AddNewPromotionModal(driver);\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickPromotionsTab();\n            await promotions.addPromotionButtonIsVisible();\n            await promotions.clickAddPromotionButton();\n            await newPromotion.addPromotionModalIsDisplayed();\n            await newPromotion.newPromotionForThreeWithLimitOnTwo(ticketTwoName, ticketThreeName, ticketFourName, promoThreeName, promoCodeThree);\n            await promotions.addPromotionButtonIsVisible();\n            await promotions.clickAddPromotionButton();\n            await newPromotion.addPromotionModalIsDisplayed();\n            await newPromotion.createPromotionWith100discountForAllTickets(ticketOneName, promoFiveName, promoCodeFive);\n            await promotions.promotionsHeaderIsVisible();\n            await sideMenu.ticketingTabIsDisplayed();",
              "err": {},
              "uuid": "a3ba9549-a3b4-4ce5-8633-e09ab921bfaa",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invalid promo code applied message when promo code start time is in the future",
              "fullTitle": "Should do box office related tests should return invalid promo code applied message when promo code start time is in the future",
              "timedOut": false,
              "duration": 23400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.select3Tickets();\n            await bosExtras.isOnExtrasScreen();\n            await bosExtras.clickNextButton();\n            await bosDetails.isOnDetailsPage();\n            await bosDetails.addPromotionToTickets(promoCodeFive);\n            await bosDetails.assertReturnedValidationMessage(\"Invalid Discount Code\");",
              "err": {},
              "uuid": "1d637b76-9542-4407-954a-185528c9aca5",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should create staff ticket in portal",
              "fullTitle": "Should do box office related tests Should create staff ticket in portal",
              "timedOut": false,
              "duration": 18595,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "createTicket = new CreateTicketModal(driver);\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickTicketingTab();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickAddTicketButton();\n            await createTicket.createStaffTicket(staffTicket, ticketStaffPrice ,ticketStaffQuantity);\n            await ticketsNav.assertTicketNamePriceAndQuantity(staffTicket, ticketStaffPrice, ticketStaffQuantity);\n            await ticketsNav.clickActivateTicketToggle(staffTicket);",
              "err": {
                "message": "ElementClickInterceptedError: element click intercepted: Element <button type=\"button\" tabindex=\"-1\" class=\"btn dropdown-toggle bs-placeholder btn-light\" data-toggle=\"dropdown\" role=\"combobox\" aria-owns=\"bs-select-2\" aria-haspopup=\"listbox\" aria-expanded=\"false\" aria-disabled=\"false\" title=\"Select\">...</button> is not clickable at point (722, 845). Other element would receive the click: <div _ngcontent-jfv-c877=\"\" class=\"text-right btn-group-c btn-sticky\">...</div>\n  (Session info: chrome=108.0.5359.71)",
                "estack": "ElementClickInterceptedError: element click intercepted: Element <button type=\"button\" tabindex=\"-1\" class=\"btn dropdown-toggle bs-placeholder btn-light\" data-toggle=\"dropdown\" role=\"combobox\" aria-owns=\"bs-select-2\" aria-haspopup=\"listbox\" aria-expanded=\"false\" aria-disabled=\"false\" title=\"Select\">...</button> is not clickable at point (722, 845). Other element would receive the click: <div _ngcontent-jfv-c877=\"\" class=\"text-right btn-group-c btn-sticky\">...</div>\n  (Session info: chrome=108.0.5359.71)\n    at Object.throwDecodedError (node_modules\\selenium-webdriver\\lib\\error.js:524:15)\n    at parseHttpResponse (node_modules\\selenium-webdriver\\lib\\http.js:587:13)\n    at Executor.execute (node_modules\\selenium-webdriver\\lib\\http.js:515:28)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Driver.execute (node_modules\\selenium-webdriver\\lib\\webdriver.js:741:17)\n    at async CreateTicketModal.click (BasePage.js:34:9)\n    at async CreateTicketModal.createStaffTicket (portal\\portalModals\\CreateTicketModal.js:197:13)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:482:13)",
                "diff": null
              },
              "uuid": "c80f16f8-9476-47ed-a511-5b1c87c4d0f4",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert tickets groups in box-office",
              "fullTitle": "Should do box office related tests should assert tickets groups in box-office",
              "timedOut": false,
              "duration": 21510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.assertTicketGroupsTabsCountAndNames(ticketGroupOne, ticketGroupTwo, ticketGroupThree);",
              "err": {},
              "uuid": "4643adfe-0beb-429a-b49b-69ec5af263c8",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert tickets order in box-office",
              "fullTitle": "Should do box office related tests should assert tickets order in box-office",
              "timedOut": false,
              "duration": 21815,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.assertTicketsOrder(ticketOneName, ticketTwoName, ticketThreeName, ticketFourName, staffTicket);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'getText')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'getText')\n    at BOSelectTickets.assertTicketsOrder (portal\\ticketing\\BoxOffice\\BOSelectTickets.js:72:43)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:498:13)",
                "diff": null
              },
              "uuid": "8c3d155b-1316-42bf-a9d7-5c65c6e56153",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert ticket quantity by group equals tickets in table",
              "fullTitle": "Should do box office related tests should assert ticket quantity by group equals tickets in table",
              "timedOut": false,
              "duration": 19599,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.assertTicketQuantityByGroup();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //button[contains(@class, 'btn-purple')])\nWait timed out after 5097ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //button[contains(@class, 'btn-purple')])\nWait timed out after 5097ms\n    at D:\\Upped_Events_Inc\\node_modules\\selenium-webdriver\\lib\\webdriver.js:907:17\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "2f6aaba5-ba05-432d-bda3-00f7342ab7f8",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert ticket quantity in Group All equals sum of individual groups count",
              "fullTitle": "Should do box office related tests should assert ticket quantity in Group All equals sum of individual groups count",
              "timedOut": false,
              "duration": 23914,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.assertTicketCountInAllTabEqualsSumOfIndividualGroups();",
              "err": {},
              "uuid": "05b5f871-bb9b-4e34-ab5a-3fca420d2e75",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert tickets by groups in box-office",
              "fullTitle": "Should do box office related tests should assert tickets by groups in box-office",
              "timedOut": false,
              "duration": 18504,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.assertTicketsByGroups(ticketOneName, ticketTwoName, ticketThreeName, ticketFourName);",
              "err": {
                "message": "AssertionError: 1 == 2",
                "estack": "AssertionError [ERR_ASSERTION]: 1 == 2\n    at BOSelectTickets.assertTicketsByGroups (portal\\ticketing\\BoxOffice\\BOSelectTickets.js:88:20)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:519:13)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "a24da806-fd0d-4abe-9fd8-540969b66f96",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should change ticket order in portal and assert change in box-office",
              "fullTitle": "Should do box office related tests should change ticket order in portal and assert change in box-office",
              "timedOut": false,
              "duration": 37578,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickTicketingTab();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.dragThirdTicketInTopPosition();\n            await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.assertTicketsOrderAfterChangedOrder(ticketOneName, ticketTwoName, ticketThreeName, ticketFourName);",
              "err": {},
              "uuid": "99b31d8b-62c2-4de0-bb18-fc31ba3565fa",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should change ticket location from one group 2 to group 1 in portal and assert change",
              "fullTitle": "Should do box office related tests should change ticket location from one group 2 to group 1 in portal and assert change",
              "timedOut": false,
              "duration": 8799,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickTicketingTab();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickGroupTabsByIndexAssertNumberOfTickets(ticketOneName, ticketTwoName, ticketThreeName, staffTicket);\n            await ticketsNav.dragTicketFromGroupTwoToGroupOne();\n            await ticketsNav.assertTicketIsRemovedFromGroupTwoAndAddedToGroupOne(ticketOneName, ticketTwoName, ticketThreeName, staffTicket);",
              "err": {
                "message": "AssertionError: 1 == 2",
                "estack": "AssertionError [ERR_ASSERTION]: 1 == 2\n    at TicketsNav.clickGroupTabsByIndexAssertNumberOfTickets (portal\\ticketing\\TicketsNav.js:173:20)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:547:13)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "05a12a69-51f9-4959-9985-93d0c41081e8",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should check attendees page elements when no purchases made",
              "fullTitle": "Should do box office related tests Should check attendees page elements when no purchases made",
              "timedOut": false,
              "duration": 7397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "attendees = new AttendeesTab(driver);\n            sectionsNavs = new SectionsNavs(driver)\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await driver.sleep(2000);\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await driver.sleep(500);\n            await sectionsNavs.clickNavByIndex(4);\n            await attendees.isOnAttendeesTab();\n            await attendees.noAttendeesInTableMessage();",
              "err": {},
              "uuid": "4c50b7ef-99aa-40ad-bd8e-fd5148343ab1",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should make purchase with card when user has account and additional email is provided and check purchase emails in inbox",
              "fullTitle": "Should do box office related tests Should make purchase with card when user has account and additional email is provided and check purchase emails in inbox",
              "timedOut": false,
              "duration": 78539,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "inbox = new Inbox(driver);\nawait bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.selectTwoTickets();\nawait bosExtras.isOnExtrasScreen();\nawait bosExtras.clickNextButton();\nawait bosDetails.continueToPayment();\nawait bosReview.makePaymentWithCard(base);\nawait inbox.loadInbox();\nawait inbox.inboxIsOpened();\nawait inbox.checkAccountEmailIsSend(base);\nawait inbox.checkAdditionalEmailIsSend(base);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .confirmation-heading)\nWait timed out after 55054ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .confirmation-heading)\nWait timed out after 55054ms\n    at D:\\Upped_Events_Inc\\node_modules\\selenium-webdriver\\lib\\webdriver.js:907:17\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "cb8f9303-5e91-4e57-a248-cfeff126b1ae",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assert attendee is displayed in table after purchase",
              "fullTitle": "Should do box office related tests Should assert attendee is displayed in table after purchase",
              "timedOut": false,
              "duration": 3933,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "attendees = new AttendeesTab(driver);\n            sectionsNavs = new SectionsNavs(driver);\n            \n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await driver.sleep(2000);\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await driver.sleep(500);\n            await sectionsNavs.clickNavByIndex(4);\n            await attendees.isOnAttendeesTab();\n            await attendees.checkForCustomerFullNameByIndex(0 , base, base);",
              "err": {
                "message": "StaleElementReferenceError: stale element reference: element is not attached to the page document\n  (Session info: chrome=108.0.5359.71)",
                "estack": "StaleElementReferenceError: stale element reference: element is not attached to the page document\n  (Session info: chrome=108.0.5359.71)\n    at Object.throwDecodedError (node_modules\\selenium-webdriver\\lib\\error.js:524:15)\n    at parseHttpResponse (node_modules\\selenium-webdriver\\lib\\http.js:587:13)\n    at Executor.execute (node_modules\\selenium-webdriver\\lib\\http.js:515:28)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Driver.execute (node_modules\\selenium-webdriver\\lib\\webdriver.js:741:17)",
                "diff": null
              },
              "uuid": "d98b965a-58d9-4bbc-9b39-1682c40d76c6",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should make purchase with cash when user has account and additional email is provided",
              "fullTitle": "Should do box office related tests Should make purchase with cash when user has account and additional email is provided",
              "timedOut": false,
              "duration": 78338,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.selectTwoTickets();\n            await bosExtras.isOnExtrasScreen();\n            await bosExtras.clickNextButton();\n            await bosDetails.continueToPayment();\n            await bosReview.makePaymentWithCash(base);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .confirmation-heading)\nWait timed out after 55203ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .confirmation-heading)\nWait timed out after 55203ms\n    at D:\\Upped_Events_Inc\\node_modules\\selenium-webdriver\\lib\\webdriver.js:907:17\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "70024291-24cb-4308-87a6-d045f4e9df3c",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invalid promo code when wrong promo code",
              "fullTitle": "Should do box office related tests should return invalid promo code when wrong promo code",
              "timedOut": false,
              "duration": 19534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.select3Tickets();\n            await bosExtras.isOnExtrasScreen();\n            await bosExtras.clickNextButton();\n            await bosDetails.addWrongPromoCodeAssertErrorValidation();",
              "err": {},
              "uuid": "61454317-e117-44ac-a854-87baa948a2d4",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return green promo code applied message when promo code is valid",
              "fullTitle": "Should do box office related tests should return green promo code applied message when promo code is valid",
              "timedOut": false,
              "duration": 19542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.select3Tickets();\n            await bosExtras.isOnExtrasScreen();\n            await bosExtras.clickNextButton();\n            await bosDetails.isOnDetailsPage();\n            await bosDetails.addPromotionToTickets(promoCodeThree);\n            await bosDetails.assertReturnedValidationMessage(\"Promo Code Applied!\");",
              "err": {},
              "uuid": "2a1f0556-c52b-4ac8-999b-89629201f8b7",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should check calculation on subtotal and total and check if tickets are displayed",
              "fullTitle": "Should do box office related tests Should check calculation on subtotal and total and check if tickets are displayed",
              "timedOut": false,
              "duration": 16636,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\n            await bosTickets.isOnBoxOfficePage();\n            await bosTickets.getSelectedTicketsNames(ticketOneName,ticketTwoName,ticketThreeName,ticketFourName, staffTicket);\n            await bosTickets.selectFourIndividualTickets();\n            await bosExtras.clickNextButton();\n            await bosDetails.checkTicketsNamesInOrderDetails(ticketOneName,ticketTwoName,ticketThreeName,ticketFourName);\n            await bosDetails.checkTicketPricesInOrderDetails();\n            await bosDetails.calculateTicketsSubTotal();\n            await bosDetails.calculateTicketsTotal()",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'getText')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'getText')\n    at BOSelectTickets.getTextFromElementOfArray (BasePage.js:358:38)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async BOSelectTickets.getSelectedTicketsNames (portal\\ticketing\\BoxOffice\\BOSelectTickets.js:175:30)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:643:13)",
                "diff": null
              },
              "uuid": "206ea0e4-b6a7-476a-a649-837ff810c3b6",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should make purchase with 100 percent promotion in box-office",
              "fullTitle": "Should do box office related tests Should make purchase with 100 percent promotion in box-office",
              "timedOut": false,
              "duration": 19975,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.isOnBoxOfficePage();\nawait bosTickets.select18Tickets();\nawait bosExtras.clickNextButton();\nawait bosDetails.confirmAllValuesAreZeroesAfter100PercentPromotionAndConfirmCompletion(promoCodeFive);\nawait bosDetails.continueToPayment();\nawait bosReview.paymentWith100DiscountAndPaymentCard(base);",
              "err": {
                "message": "AssertionError: 1.4 == 0",
                "estack": "AssertionError [ERR_ASSERTION]: 1.4 == 0\n    at BOAddDetails.confirmAllValuesAreZeroesAfter100PercentPromotionAndConfirmCompletion (portal\\ticketing\\BoxOffice\\BOAddDetails.js:397:20)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:659:13)",
                "diff": "- 1.4\n+ 0\n"
              },
              "uuid": "98e0acd2-d2e0-46e7-85b1-e8c058491628",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should make calculation for promotion with limits , exceed limit , assert totals",
              "fullTitle": "Should do box office related tests Should make calculation for promotion with limits , exceed limit , assert totals",
              "timedOut": false,
              "duration": 17934,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.isOnBoxOfficePage();\nawait bosTickets.select23TicketsForPromotionWithLimits();\nawait bosExtras.isOnExtrasScreen();\nawait bosExtras.clickNextButton();\nawait bosDetails.assertTotalValueBeforeAndAfterPromotionWhenLimitsWereExceeded(ticketTwoPrice, ticketThreePrice, ticketFourPrice, promoCodeThree);",
              "err": {
                "message": "AssertionError: '0.60' == '0.72'",
                "estack": "AssertionError [ERR_ASSERTION]: '0.60' == '0.72'\n    at BOAddDetails.assertTotalValueBeforeAndAfterPromotionWhenLimitsWereExceeded (portal\\ticketing\\BoxOffice\\BOAddDetails.js:177:20)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Context.<anonymous> (test\\PortalBox-OfficeTests.js:671:13)",
                "diff": "- 0.60\n+ 0.72\n"
              },
              "uuid": "00080763-9919-40e8-9558-51a10a2f32cf",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assert that order details on add details equals on review page when promotion and donation is added",
              "fullTitle": "Should do box office related tests Should assert that order details on add details equals on review page when promotion and donation is added",
              "timedOut": false,
              "duration": 25175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.isOnBoxOfficePage();\nawait bosTickets.select18Tickets();\nawait bosExtras.add10$ToOrderOnExtrasPage();\nawait bosDetails.assertValuesInOrderDetailsComponentEqualsOnAddDetailsAndReviewPage(promoCodeThree);",
              "err": {},
              "uuid": "4a222a67-ed6b-438d-bb42-0580e076722c",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should make payment for promotion with limits , and buy all promoted tickets",
              "fullTitle": "Should do box office related tests Should make payment for promotion with limits , and buy all promoted tickets",
              "timedOut": false,
              "duration": 78884,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.isOnBoxOfficePage();\nawait bosTickets.select23TicketsForPromotionWithLimits();\nawait bosExtras.isOnExtrasScreen();\nawait bosExtras.clickNextButton();\nawait bosDetails.addPromotionToTickets(promoCodeThree);\nawait bosDetails.continueToPayment();\nawait bosReview.makePaymentWithCard(base);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .confirmation-heading)\nWait timed out after 55109ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .confirmation-heading)\nWait timed out after 55109ms\n    at D:\\Upped_Events_Inc\\node_modules\\selenium-webdriver\\lib\\webdriver.js:907:17\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "80b5fa9b-086d-4a41-9484-db8c43ebe6ce",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get invalid promotion message when promotion with limited qty is over",
              "fullTitle": "Should do box office related tests should get invalid promotion message when promotion with limited qty is over",
              "timedOut": false,
              "duration": 23884,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.isOnBoxOfficePage();\nawait bosTickets.select23TicketsForPromotionWithLimits();\nawait bosExtras.isOnExtrasScreen();\nawait bosExtras.clickNextButton();\nawait bosDetails.applyExpiredPromoCode(promoCodeThree);\nawait bosDetails.redErrorAlertIsReturned(\"This promotion code is no longer valid\");",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .toast-message)\nWait timed out after 5031ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .toast-message)\nWait timed out after 5031ms\n    at D:\\Upped_Events_Inc\\node_modules\\selenium-webdriver\\lib\\webdriver.js:907:17\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "d229eb79-eb50-43cc-a1b2-07c5608d3f71",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that the sold tickets for each ticket in box office table equals the values in tickets main table",
              "fullTitle": "Should do box office related tests should assert that the sold tickets for each ticket in box office table equals the values in tickets main table",
              "timedOut": false,
              "duration": 30554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.isOnBoxOfficePage();\nlet soldBoxOffice = await bosTickets.getSoldTicketsNumberForEachTicket();\nawait ticketsNav.openTicketsPageDirectly(eventId, environment)\nawait ticketsNav.addTicketButtonIsDisplayed();\nawait ticketsNav.assertTicketsSoldInBoxOfficeEqualsSoldTicketsInTicketsNav(soldBoxOffice);",
              "err": {},
              "uuid": "ec1945ba-ea6a-4101-8981-690233efbdb7",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create new ticket and assert data in box-office table",
              "fullTitle": "Should do box office related tests should create new ticket and assert data in box-office table",
              "timedOut": false,
              "duration": 34123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createTicket = new CreateTicketModal(driver);\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await driver.sleep(1000);\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickTicketingTab();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickAddTicketButton();\n            await createTicket.createNewTicket(ticketToBeDeleted,ticketToBeDeletedPrice, ticketToBeDeletedQuantity);\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickActivateTicketToggle(ticketToBeDeleted);\n            await sectionsNavs.clickNavByIndex(4)\n            await bosTickets.assertTicketDataByTicketName(ticketToBeDeleted,ticketToBeDeletedPrice.toFixed(2), ticketToBeDeletedQuantity);",
              "err": {},
              "uuid": "51ab7891-e77e-4e04-844d-4d7e3c856927",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should try and fail to delete ticket that has sold some quantity",
              "fullTitle": "Should do box office related tests should try and fail to delete ticket that has sold some quantity",
              "timedOut": false,
              "duration": 13635,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "createTicket = new CreateTicketModal(driver);\n            await dashboard.clickMyEventsTab();\n            await myEvents.eventsTableIsDisplayed();\n            await driver.sleep(1000);\n            await myEvents.createdEventIsInTheTable(eventName);\n            await myEvents.clickTheNewCreatedEventInTheTable(eventName);\n            await eventDetails.publishButtonIsDisplayed();\n            await sideMenu.clickTicketingTab();\n            await ticketsNav.addTicketButtonIsDisplayed();\n            await ticketsNav.clickDeleteTicketButtonByTicketName(ticketOneName);\n            await ticketsNav.errorDeletingTicketMessage();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .toast-message)\nWait timed out after 5029ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .toast-message)\nWait timed out after 5029ms\n    at D:\\Upped_Events_Inc\\node_modules\\selenium-webdriver\\lib\\webdriver.js:907:17\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "54a57c4b-da96-4490-8a1f-223954bcf8ae",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert tickets count in box office, delete in portal, assert deletion in box-office",
              "fullTitle": "Should do box office related tests should assert tickets count in box office, delete in portal, assert deletion in box-office",
              "timedOut": false,
              "duration": 38423,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.isOnBoxOfficePage();\nlet tickets = await bosTickets.returnTotalTicketsInBox();\nawait ticketsNav.openTicketsPageDirectly(eventId, environment);\nawait ticketsNav.addTicketButtonIsDisplayed();\nawait ticketsNav.clickDeleteTicketButtonByTicketName(ticketToBeDeleted);\nawait bosTickets.openBoxOfficeDirectly(eventId, environment);\nawait bosTickets.assertTicketsCount(tickets);",
              "err": {},
              "uuid": "be6e7c25-de13-4508-848b-451ca94a76a9",
              "parentUUID": "7db1758a-f2f9-4c97-8576-974f9d0635e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0217081-4376-466d-bd90-383e214dce4e",
            "2c66d70b-01e4-4d30-96d1-0b29c36a42ac",
            "d42f4b08-b063-409c-bac3-34078776ac80",
            "7b2c7bd9-16a9-4b75-8779-2ef88cc0311a",
            "12c60c74-e8af-4b09-aec3-9d6ea0e1a6fb",
            "bd2d795f-8f22-455c-a53c-4dfb58f6760a",
            "efc4f48f-42c1-4715-b7fa-6d0ad200ac83",
            "c6b6c2bc-1186-4b8f-a35b-d018e914954f",
            "770861d9-0863-49af-b171-9a133fc7187c",
            "920b82d1-ee66-4470-9ad8-dee75b7fa625",
            "07e690cf-5575-416e-a267-d911a36adb58",
            "b1fa0cde-dff0-41cc-84f6-f329dec94531",
            "7d68d8af-0adf-4035-a5e7-545866aa4b93",
            "a45d39d7-3b2a-4026-9958-5a8df079f6b8",
            "31a49866-00ac-49b7-a9cc-7fc3a706481e",
            "1c75ff6b-7474-42dd-84ec-5d91854d5fec",
            "84d772cd-6701-4d94-832f-efdb7c2c0a7c",
            "e8639c01-a7d9-4b09-8b91-a13d78b1550c",
            "c8d2afcc-c9a0-4f13-8210-9e984f289f92",
            "2d4a55cc-6442-447c-b052-da081becd8b1",
            "7d358246-82af-48cb-ac31-5a87e3259ec8",
            "215c5ea8-bd90-43be-9255-07957c578110",
            "9efd57f6-5139-4a8f-b9d6-2903a1dd7b6e",
            "a6465ca4-5de3-4922-9d80-6e79aec13f9a",
            "a3ba9549-a3b4-4ce5-8633-e09ab921bfaa",
            "1d637b76-9542-4407-954a-185528c9aca5",
            "4643adfe-0beb-429a-b49b-69ec5af263c8",
            "05b5f871-bb9b-4e34-ab5a-3fca420d2e75",
            "99b31d8b-62c2-4de0-bb18-fc31ba3565fa",
            "4c50b7ef-99aa-40ad-bd8e-fd5148343ab1",
            "61454317-e117-44ac-a854-87baa948a2d4",
            "2a1f0556-c52b-4ac8-999b-89629201f8b7",
            "4a222a67-ed6b-438d-bb42-0580e076722c",
            "ec1945ba-ea6a-4101-8981-690233efbdb7",
            "51ab7891-e77e-4e04-844d-4d7e3c856927",
            "be6e7c25-de13-4508-848b-451ca94a76a9"
          ],
          "failures": [
            "4f03da8b-abf9-49fa-9e92-0181be744e64",
            "c80f16f8-9476-47ed-a511-5b1c87c4d0f4",
            "8c3d155b-1316-42bf-a9d7-5c65c6e56153",
            "2f6aaba5-ba05-432d-bda3-00f7342ab7f8",
            "a24da806-fd0d-4abe-9fd8-540969b66f96",
            "05a12a69-51f9-4959-9985-93d0c41081e8",
            "cb8f9303-5e91-4e57-a248-cfeff126b1ae",
            "d98b965a-58d9-4bbc-9b39-1682c40d76c6",
            "70024291-24cb-4308-87a6-d045f4e9df3c",
            "206ea0e4-b6a7-476a-a649-837ff810c3b6",
            "98e0acd2-d2e0-46e7-85b1-e8c058491628",
            "00080763-9919-40e8-9558-51a10a2f32cf",
            "80b5fa9b-086d-4a41-9484-db8c43ebe6ce",
            "d229eb79-eb50-43cc-a1b2-07c5608d3f71",
            "54a57c4b-da96-4490-8a1f-223954bcf8ae"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1666615,
          "root": false,
          "rootEmpty": false,
          "_timeout": 500000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}